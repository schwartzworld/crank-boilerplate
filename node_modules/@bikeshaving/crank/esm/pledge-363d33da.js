function isPromiseLike(value) {
    return value != null && typeof value.then === "function";
}
function upgrade(value) {
    if (isPromiseLike(value) && !(value instanceof Promise)) {
        return Promise.resolve(value);
    }
    return value;
}
/**
 * A pledge is like a promise, except it runs synchronously if possible.
 */
var Pledge = /** @class */ (function () {
    // TODO: allow value to be a callable function so we can catch errors
    function Pledge(value) {
        var _this = this;
        if (isPromiseLike(value)) {
            this.state = { status: "pending", promise: Promise.resolve(value) };
            value.then(function (value) { return (_this.state = { status: "fulfilled", value: value }); }, function (reason) { return (_this.state = { status: "rejected", reason: reason }); });
        }
        else {
            this.state = { status: "fulfilled", value: value };
        }
    }
    Pledge.prototype.then = function (onFulfilled, onRejected) {
        switch (this.state.status) {
            case "fulfilled": {
                if (onFulfilled == null) {
                    return this.state.value;
                }
                else {
                    return upgrade(onFulfilled(this.state.value));
                }
            }
            case "rejected": {
                if (onRejected == null) {
                    throw this.state.reason;
                }
                else {
                    return upgrade(onRejected(this.state.reason));
                }
            }
            case "pending": {
                return this.state.promise.then(onFulfilled, onRejected);
            }
        }
    };
    Pledge.prototype.catch = function (onRejected) {
        switch (this.state.status) {
            case "fulfilled": {
                return this.state.value;
            }
            case "rejected": {
                if (onRejected == null) {
                    throw this.state.reason;
                }
                else {
                    return upgrade(onRejected(this.state.reason));
                }
            }
            case "pending": {
                return this.state.promise.catch(onRejected);
            }
        }
    };
    Pledge.prototype.finally = function (onFinally) {
        switch (this.state.status) {
            case "fulfilled": {
                if (onFinally != null) {
                    onFinally();
                }
                return this.state.value;
            }
            case "rejected": {
                if (onFinally != null) {
                    onFinally();
                }
                throw this.state.reason;
            }
            case "pending": {
                return this.state.promise.finally(onFinally);
            }
        }
    };
    return Pledge;
}());

export { Pledge as P, isPromiseLike as i };
//# sourceMappingURL=pledge-363d33da.js.map
