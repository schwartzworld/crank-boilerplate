import { _ as __extends, a as __values, e as __read } from './_tslib-21ac4f0e.js';
import '@repeaterjs/repeater';
import 'event-target-shim';
import { Default, Text, Portal, Renderer } from './index.js';
import { P as Pledge } from './pledge-363d33da.js';

var _a;
// Adapted from https://stackoverflow.com/a/28458409/
function escapeText(text) {
    return text.replace(/[&<"']/g, function (m) {
        switch (m) {
            case "&":
                return "&amp;";
            case "<":
                return "&lt;";
            case ">":
                return "&gt;";
            case '"':
                return "&quot;";
            case "'":
                return "&#039;";
            default:
                throw new Error("Bad match");
        }
    });
}
function printStyle(style) {
    var e_1, _a;
    var cssStrings = [];
    try {
        for (var _b = __values(Object.entries(style)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), name_1 = _d[0], value = _d[1];
            if (value != null) {
                cssStrings.push(name_1 + ":" + value + ";");
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return cssStrings.join("");
}
function printAttrs(props) {
    var e_2, _a;
    var attrs = [];
    try {
        for (var _b = __values(Object.entries(props)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), name_2 = _d[0], value = _d[1];
            switch (true) {
                case name_2 === "children":
                case name_2 === "innerHTML":
                    break;
                case name_2 === "style":
                    attrs.push("style=\"" + printStyle(value) + "\"");
                    break;
                case typeof value === "string":
                    attrs.push(escapeText(name_2) + "=\"" + escapeText(value) + "\"");
                    break;
                case typeof value === "number":
                    attrs.push(escapeText(name_2) + "=\"" + value + "\"");
                    break;
                case typeof value === "boolean":
                    attrs.push("" + escapeText(name_2));
                    break;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return attrs.join(" ");
}
var voidTags = new Set([
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
]);
var env = (_a = {},
    _a[Default] = function (tag) {
        return function defaultString(props) {
            var attrs = printAttrs(props);
            var open = "<" + tag + (attrs.length ? " " : "") + attrs + ">";
            if (voidTags.has(tag)) {
                return open;
            }
            var close = "</" + tag + ">";
            if ("innerHTML" in props) {
                return "" + open + props["innerHTML"] + close;
            }
            return "" + open + this.childNodes.join("") + close;
        };
    },
    _a[Text] = function (text) {
        return escapeText(text);
    },
    _a[Portal] = function () {
        return this.childNodes.join("");
    },
    _a);
var StringRenderer = /** @class */ (function (_super) {
    __extends(StringRenderer, _super);
    function StringRenderer() {
        return _super.call(this, env) || this;
    }
    StringRenderer.prototype.renderToString = function (child, key) {
        return new Pledge(this.render(child, key)).then(function (ctx) { return (ctx && ctx.node) || ""; });
    };
    return StringRenderer;
}(Renderer));
var renderer = new StringRenderer();

export { StringRenderer, env, renderer };
//# sourceMappingURL=html.js.map
