import { EventTarget as EventTargetShim } from "event-target-shim";
declare global {
    module crank {
        interface EventMap {
            [type: string]: Event;
        }
    }
}
declare type MappedEventListener<T extends string> = (ev: crank.EventMap[T]) => unknown;
export declare class CrankEventTarget extends EventTargetShim implements EventTarget {
    private parent?;
    constructor(parent?: CrankEventTarget | undefined);
    private listeners;
    private _delegates;
    get delegates(): Set<EventTarget>;
    set delegates(delegates: Set<EventTarget>);
    addEventListener<T extends string>(type: T, callback: MappedEventListener<T> | null, options?: boolean | AddEventListenerOptions): unknown;
    removeEventListener<T extends string>(type: T, callback: MappedEventListener<T> | null, options?: EventListenerOptions | boolean): void;
    clearEventListeners(): void;
    dispatchEvent(ev: any): boolean;
}
export declare function isEventTarget(value: any): value is EventTarget;
export {};
