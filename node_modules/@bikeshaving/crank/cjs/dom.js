'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('./_tslib-7cf18fc1.js');
require('@repeaterjs/repeater');
require('event-target-shim');
var index = require('./index.js');
require('./pledge-49715615.js');

var _a;
function updateProps(el, props, newProps) {
    for (var name_1 in Object.assign({}, props, newProps)) {
        // TODO: throw an error if event props are found
        if (name_1 === "children") {
            continue;
        }
        var value = props[name_1];
        var newValue = newProps[name_1];
        if (name_1 === "style") {
            if (newValue == null) {
                el.removeAttribute("style");
            }
            else if (typeof newValue === "string") {
                el.style.cssText = newValue;
            }
            else {
                for (var styleName in Object.assign({}, value, newValue)) {
                    var styleValue = value && value[styleName];
                    var newStyleValue = newValue && newValue[styleName];
                    if (newStyleValue == null) {
                        el.style.removeProperty(styleName);
                    }
                    else if (styleValue !== newStyleValue) {
                        el.style.setProperty(styleName, newStyleValue);
                    }
                }
            }
        }
        else if (name_1 in el) {
            el[name_1] = newValue;
        }
        else {
            if (newValue === true) {
                el.setAttribute(name_1, "");
            }
            else if (newValue === false || newValue == null) {
                el.removeAttribute(name_1);
            }
            else {
                el.setAttribute(name_1, newValue);
            }
        }
    }
}
// TODO: improve this algorithm
// https://stackoverflow.com/questions/59418120/what-is-the-most-efficient-way-to-update-the-childnodes-of-a-dom-node-with-an-ar
function updateChildren(el, children) {
    var e_1, _a, e_2, _b;
    if (el.childNodes.length === 0) {
        var fragment = document.createDocumentFragment();
        try {
            for (var children_1 = _tslib.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var child = children_1_1.value;
                if (typeof child === "string") {
                    child = document.createTextNode(child);
                }
                fragment.appendChild(child);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        el.appendChild(fragment);
        return;
    }
    var oldChild = el.firstChild;
    try {
        for (var children_2 = _tslib.__values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {
            var newChild = children_2_1.value;
            if (oldChild === null) {
                el.appendChild(typeof newChild === "string"
                    ? document.createTextNode(newChild)
                    : newChild);
            }
            else if (typeof newChild === "string") {
                if (oldChild.nodeType === Node.TEXT_NODE) {
                    if (oldChild.nodeValue !== newChild) {
                        oldChild.nodeValue = newChild;
                    }
                    oldChild = oldChild.nextSibling;
                }
                else {
                    el.insertBefore(document.createTextNode(newChild), oldChild);
                }
            }
            else if (oldChild !== newChild) {
                el.insertBefore(newChild, oldChild);
            }
            else {
                oldChild = oldChild.nextSibling;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (children_2_1 && !children_2_1.done && (_b = children_2.return)) _b.call(children_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    while (oldChild !== null) {
        var nextSibling = oldChild.nextSibling;
        el.removeChild(oldChild);
        oldChild = nextSibling;
    }
}
var env = (_a = {},
    _a[index.Default] = function (tag) {
        return function defaultDOM() {
            var node, props, prevChildNodes, _a, _b, props1, e_3_1;
            var e_3, _c;
            return _tslib.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        node = document.createElement(tag);
                        props = {};
                        prevChildNodes = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = _tslib.__values(this), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        props1 = _b.value;
                        updateProps(node, props, props1);
                        if (!("innerHTML" in props1) &&
                            (this.childNodes.length > 0 || prevChildNodes.length > 0)) {
                            updateChildren(node, this.childNodes);
                            prevChildNodes = this.childNodes;
                        }
                        return [4 /*yield*/, node];
                    case 3:
                        _d.sent();
                        props = props1;
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        };
    },
    _a[index.Portal] = function (_a) {
        var _b, _c, newRoot, e_4_1;
        var e_4, _d;
        var root = _a.root;
        return _tslib.__generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (root == null) {
                        throw new TypeError("Portal element is missing root node");
                    }
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, , 10, 11]);
                    _e.label = 2;
                case 2:
                    _e.trys.push([2, 7, 8, 9]);
                    _b = _tslib.__values(this), _c = _b.next();
                    _e.label = 3;
                case 3:
                    if (!!_c.done) return [3 /*break*/, 6];
                    newRoot = _c.value.root;
                    if (newRoot == null) {
                        throw new TypeError("Portal element is missing root node");
                    }
                    if (root !== newRoot) {
                        updateChildren(root, []);
                        root = newRoot;
                    }
                    updateChildren(root, this.childNodes);
                    return [4 /*yield*/, root];
                case 4:
                    _e.sent();
                    _e.label = 5;
                case 5:
                    _c = _b.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_4_1 = _e.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                    return [7 /*endfinally*/];
                case 9: return [3 /*break*/, 11];
                case 10:
                    updateChildren(root, []);
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/];
            }
        });
    },
    _a);
var DOMRenderer = /** @class */ (function (_super) {
    _tslib.__extends(DOMRenderer, _super);
    function DOMRenderer() {
        return _super.call(this, env) || this;
    }
    return DOMRenderer;
}(index.Renderer));
var renderer = new DOMRenderer();

exports.DOMRenderer = DOMRenderer;
exports.env = env;
exports.renderer = renderer;
//# sourceMappingURL=dom.js.map
