import { EventTarget as EventTargetShim } from "event-target-shim";
export interface EventMap {
    [type: string]: Event;
}
declare type MappedEventListener<T extends string> = (ev: EventMap[T]) => unknown;
export declare function isEventTarget(value: any): value is EventTarget;
export declare class CrankEventTarget extends EventTargetShim implements EventTarget {
    private parent?;
    private listeners;
    private delegates;
    constructor(parent?: CrankEventTarget | undefined);
    setDelegates(delegates: Iterable<unknown>): void;
    addEventListener<T extends string>(type: T, callback: MappedEventListener<T> | null, options?: boolean | AddEventListenerOptions): unknown;
    removeEventListener<T extends string>(type: T, callback: MappedEventListener<T> | null, options?: EventListenerOptions | boolean): void;
    clearEventListeners(): void;
    dispatchEvent(ev: any): boolean;
}
export {};
