{"id":"node_modules/@bikeshaving/crank/esm/pledge-363d33da.js","dependencies":[{"name":"/Users/ianschwartz/crank-boilerplate/node_modules/@bikeshaving/crank/esm/pledge-363d33da.js.map","includedInParent":true,"mtime":1587136189624},{"name":"/Users/ianschwartz/crank-boilerplate/package.json","includedInParent":true,"mtime":1587136220963},{"name":"/Users/ianschwartz/crank-boilerplate/.babelrc","includedInParent":true,"mtime":1587136213417},{"name":"/Users/ianschwartz/crank-boilerplate/node_modules/@bikeshaving/crank/package.json","includedInParent":true,"mtime":1587136189624}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.i = isPromiseLike;\nexports.P = void 0;\n\nfunction isPromiseLike(value) {\n  return value != null && typeof value.then === \"function\";\n}\n\nfunction upgrade(value) {\n  if (isPromiseLike(value) && !(value instanceof Promise)) {\n    return Promise.resolve(value);\n  }\n\n  return value;\n}\n/**\r\n * A pledge is like a promise, except it runs synchronously if possible.\r\n */\n\n\nvar Pledge =\n/** @class */\nfunction () {\n  // TODO: allow value to be a callable function so we can catch errors\n  function Pledge(value) {\n    var _this = this;\n\n    if (isPromiseLike(value)) {\n      this.state = {\n        status: \"pending\",\n        promise: Promise.resolve(value)\n      };\n      value.then(function (value) {\n        return _this.state = {\n          status: \"fulfilled\",\n          value: value\n        };\n      }, function (reason) {\n        return _this.state = {\n          status: \"rejected\",\n          reason: reason\n        };\n      });\n    } else {\n      this.state = {\n        status: \"fulfilled\",\n        value: value\n      };\n    }\n  }\n\n  Pledge.prototype.then = function (onFulfilled, onRejected) {\n    switch (this.state.status) {\n      case \"fulfilled\":\n        {\n          if (onFulfilled == null) {\n            return this.state.value;\n          } else {\n            return upgrade(onFulfilled(this.state.value));\n          }\n        }\n\n      case \"rejected\":\n        {\n          if (onRejected == null) {\n            throw this.state.reason;\n          } else {\n            return upgrade(onRejected(this.state.reason));\n          }\n        }\n\n      case \"pending\":\n        {\n          return this.state.promise.then(onFulfilled, onRejected);\n        }\n    }\n  };\n\n  Pledge.prototype.catch = function (onRejected) {\n    switch (this.state.status) {\n      case \"fulfilled\":\n        {\n          return this.state.value;\n        }\n\n      case \"rejected\":\n        {\n          if (onRejected == null) {\n            throw this.state.reason;\n          } else {\n            return upgrade(onRejected(this.state.reason));\n          }\n        }\n\n      case \"pending\":\n        {\n          return this.state.promise.catch(onRejected);\n        }\n    }\n  };\n\n  Pledge.prototype.finally = function (onFinally) {\n    switch (this.state.status) {\n      case \"fulfilled\":\n        {\n          if (onFinally != null) {\n            onFinally();\n          }\n\n          return this.state.value;\n        }\n\n      case \"rejected\":\n        {\n          if (onFinally != null) {\n            onFinally();\n          }\n\n          throw this.state.reason;\n        }\n\n      case \"pending\":\n        {\n          return this.state.promise.finally(onFinally);\n        }\n    }\n  };\n\n  return Pledge;\n}();\n\nexports.P = Pledge;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"b3aaae62a8ff11664db9fc53681b991a","cacheData":{"env":{}}}